---
title: About the On-Demand Services SDK
owner: London Services Enablement
---

This topic provides information about what the on-demand services SDK is and who uses it.
It also explains the concepts behind on-demand brokers such as service brokers, 
service networks, on-demand services and service adapters.

## <a id="odb-sdk"></a>On-Demand Services SDK and the On-Demand Broker

You can use the on-demand services SDK to create on-demand brokers for single-tenant service offerings.

The on-demand services SDK simplifies broker and tile authoring, 
and is the standard approach for both Pivotal internal services teams and Pivotal 
partner independent software vendors (ISVs) to develop on-demand services for PCF.
It provides a generic on-demand broker (ODB) that answers API calls from the Cloud Controller. 
The service author adds service-specific functionality to the on-demand services SDK through an 
executable called a **Service Adapter**. 
The service adapter and on-demand broker along with other combine to create the 
BOSH deployment as can be seen in the diagram below.
This can be combined with other BOSH releases to generate a tile.

![ODB Service Adapter](img/odb-service-adapter.png)

The on-demand services SDK imposes no constraints on the service authors' ability 
to offer new functionality, or expose configuration options in their service plans, 
such as rate limiting and external load balancers.

## <a id="roles"></a>On-Demand Broker Roles

This documentation provides information for several roles. 
Some of these roles might be carried out by the same person or team.
This section provides a summary of the responsibilities for each of these roles.

### <a id="service-author"></a>Service Author
Service authors write and maintain the service adapter. 
For more information about service author responsibilities, see [Creating the Service Author Deliverables](creating.html).

### <a id="operator"></a>Operator
Operators deploy and maintain the broker. 
They also manage access control for CF developers. 
The following list describes the responsibilities of the two types of operator which might be combined or separate:  

- **Ops Manager Operator**: Configures plans and provides service specific configurations using Ops Manager. 
For more information about configuring a specific service, see the [Pivotal Documentation](https://docs.pivotal.io/) 
for the service.
- **BOSH Operator**: Configures the on-demand service broker manifest to 
provide broker and service specific configurations.
For more information about operator responsibilities, see [Operating an On-Demand Broker](./operating.html).

### <a id="tile-author"></a>Tile Author
Tile authors determine which configuration options to expose to in Ops Manager,
create the tile, and publish it on Pivotal Network.

## <a id="cf-broker"></a>Cloud Foundry Service Brokers and PCF Tiles

Service brokers let developers create service instances in their development spaces 
that they can call from their code. 
To do this, the brokers provide an interface between the Cloud Controller and the 
add-on software service that they represent. 

The service broker works by providing an API which the Cloud Controller calls to create service instances, 
bind them to apps, and perform other operations. 
Cloud Foundry service brokers are implemented as HTTP servers that conform to the 
[Open Service Broker API](http://docs.cloudfoundry.org/services/api.html).

In addition to providing an API, a service broker publishes a service catalog 
that may include multiple service plans, such as a free tier and a metered tier. 
Brokers register their service plans with the Cloud Controller to populate the services marketplace, 
which developers access with `cf marketplace` or through the Pivotal Cloud Foundry (PCF) Apps Manager.

On PCF, operators find services on [Pivotal Network](https://network.pivotal.io/), 
and install and configure them through a tile interface in the Ops Manager **Installation Dashboard** 
to make them available to developers. 
Installing a service tile creates a service broker, registers it with the Cloud Controller, 
and publishes the service plans that the broker offers. 
Developers can then create service instances in their spaces and bind them to their apps.

![Your Service Tile in Ops Manager](img/your-service-here.png)

The central element behind a service tile is the service broker, but the tile software 
includes other components that make the service easy for operators to install and maintain, 
and easy for developers to use. 
These components include configuration layouts, upgrade rules, lifecycle errands, 
and BOSH manifests for deploying the service instances.

## <a id="service-network"></a>BOSH 2.0 and Service Networks

<%= partial 'service_networks' %>

## <a id="on-demand"></a>On-Demand Services

<%= partial 'on_demand_architecture' %>

![Default Network and Service Network](http://docs.pivotal.io/svc-sdk/odb/img/ODB-create-service.png)

## <a id="adapter"></a>Service Adapters

A service adapter is a binary that is called out by the ODB for service-specific tasks.

![responsibility-diagram](img/responsibility-diagram.png)

The above diagram shows where responsibility lies for each aspect of the ODB workflow.

The service author can focus on building the BOSH release of their service and provide 
a service adapter binary that manages manifest generation, schema generation, binding, and unbinding. 
The ODB manages all interactions with Cloud Foundry and BOSH.

Thanks to BOSH v2, service authors can define resources globally (in **Cloud Config**). 
This makes manifests portable across BOSH Cloud Provider Interfaces (CPIs) and 
lets them be substantially smaller than old-style manifests. 
The ODB takes advantage of other BOSH v2 features as well, including dynamic IP management, 
availability zones, and links through which deployed BOSH instances can access 
IP addresses and other information from other instances.

Once an on-demand tile is authored and distributed, the operator installs and configures 
it the same way they do with any other Pivotal products. 
In the process, they select which of the tile's available service plans to offer their developers.

## <a id="steps"></a>Get Started Using ODB

This documentation provides information for operators and developers in the following sections.


### <a id="operator"></a>Operator Guide

This section provides information about how to operate an on-demand broker 
for BOSH operators and Ops Manager operators. 

### <a id="service-author"></a>Service and Tile Developer Guide

This section provides information about creating on-demand services and tiles.
