---
title: Creating the Service Author Deliverables
owner: London Services Enablement
---

This topic describes how to create the deliverables required from service authors.

##<a id="what-is-required-of-the-service-authors"></a>Service Author Deliverables

Service authors must provide the following:

- A Service Release to be deployed by the manifest that is generated by the Service Adapter. See
[Create a Service Release](#create-a-service-release) below.
- A Service Adapter. See [Create a Service Adapter](#create-a-service-adapter) below.
- Documentation for the operator to configure plan definitions for the Service Adapter.
- Documentation for the operator to backup and restore service instances.

For information about the responsibilities of operators, see 
[Operator Responsibilities](operating.html#operator-checklist).

## <a id="create-a-service-release"></a>Create a Service Release

A service release is a BOSH release that is deployed at instance creation time, 
once for each service instance, by the on-demand broker (ODB). 


### <a id="service-instance-lifecycle-errands"></a>Service Instance Lifecycle Errands

 <p class="note"><strong>Note</strong>: This feature requires BOSH director v261 or later.</p>

A service release can provide job errands that are used by ODB during the management of an instance lifecycle. 
Operators can configure service instance lifecycle errands. For more information, see [Service Instance Lifecycle Errands](./operating.html#lifecycle-errands).

ODB supports the following service instance lifecycle errands:

- `post-deploy`: These errands run after the creation or updating of a service instance. 
For more information about the workflow, see [Create/Update Service Instance with Post-Deploy Errands](./concepts.html#post-deploy).
- `pre-delete`: These errands run before the deletion of a service instance. 
For more information about the workflow, see [Delete Service Instance with Pre-Delete Errand](./concepts.html#pre-delete).

A deployment is only considered successful if along with the deployment all lifecycle errands complete successfully.

See an example implementation of a health check `post-deploy` job in the [example Redis release](https://github.com/pivotal-cf-experimental/redis-example-service-release/tree/master/jobs/health-check).

If you are using the [generate-manifest](#generate-manifest) command, you must validate and include any supported errands that are specified in the instance groups array.

#### Colocated Errands

<p class="note"><strong>Note</strong>: This feature requires BOSH director v263 or later.</p>

Both `post-deploy` and `pre-delete` errands can be run as colocated errands. 
Colocated errands run on an existing service instance group, avoiding additional resource allocation.

In order to enable a new colocated errand, they must be added to the list of jobs of an instance group.

For more information see the [BOSH documentation](https://bosh.io/docs/errands.html).

### <a id="job-links"></a>Job Links

When generating a manifest, Pivotal recommends not using static IPs, which make 
network IP management very complex. 
Instead, Pivotal recommends using BOSH's job links feature.

There are two types of job links, implicit and explicit. 
The [example Kafka release](https://github.com/pivotal-cf-experimental/kafka-example-service-release/blob/master/jobs/kafka_server/spec#L15) 
uses implicit job links to get the IPs of the brokers and the zookeeper. 
For more information about the links feature, see the [BOSH documentation](https://bosh.io/docs/links.html).

### <a id="package-service"></a>Packaging a Service Release

The service release should be packaged as a BOSH release, which should be co-located with the 
ODB release in a BOSH manifest by the operator.

For examples of a service release, see the following:

* [Redis example service release](https://github.com/pivotal-cf-experimental/redis-example-service-release)
* [Kafka example service release](https://github.com/pivotal-cf-experimental/kafka-example-service-release)

For more information about how to create a BOSH release, see the [BOSH documentation](https://bosh.io/docs/create-release/). 
Pivotal recommends creating sample manifests that deploy the service release(s),
because later this helps you write the `generate-manifest` component of the Service Adapter.

## <a id="create-a-service-adapter"></a>Create a Service Adapter

A service adapter is an executable invoked by the ODB. 
Pivotal has published an SDK for teams writing their service adapters in golang.
For more information, see [Golang SDK](#sdk) below.

### <a id="subcommands"></a>Subcommands in the Adapter Interface

A service adapter is expected to respond to the subcommands below.
The parameters and expected output from these subcommands are explained in detail 
in [Service Adapter Interface Reference](./adapter-reference.html).

- `generate-manifest`:
  Generate a BOSH manifest for your service instance deployment and output to stdout 
  a JSON document containing the manifest as YAML, given information about the:
  - BOSH Director (stemcells, release names)
  - service instance (ID, request parameters, plan properties, IAAS resources)
  - previous manifest, if this is an upgrade deployment

    <p class="note"><strong>Note</strong>: ODB requires <code>generate-manifest</code> to be idempotent.
    Given the same arguments when a previous manifest is supplied&mdash;which
    happens during a deployment update&mdash;the command should always output
    the same BOSH manifest.</p>
    For more information about this subcommand, see [generate-manifest](./adapter-reference.html#generate-manifest)
<br><br>
- `dashboard-url`:
  Generate an optional URL of a web-based management user interface for the service instance.
  For more information about this subcommand, see [dashboard-url](./adapter-reference.html#dashboard-url)
<br><br>
- `create-binding`:
  Create (unique, if possible) credentials for the service instance, printing them to stdout as JSON.
  For more information about this subcommand, see [create-binding](./adapter-reference.html#create-binding)
<br><br>
- `delete-binding`:
  Invalidate the created credentials, if possible.
  Some services (e.g. Redis) are single-user, and this endpoint will do nothing.
  For more information about this subcommand, see [delete-binding](./adapter-reference.html#delete-binding)
<br><br>
- `generate-plan-schemas`:
  Generate a JSON schema to validate service-specific configuration parameters.
  For more information about this subcommand, see [generate-plan-schemas](./adapter-reference.html#generate-plan-schemas)

### <a id="dns-addresses"></a> Enable ODB to Obtain BOSH DNS Addresses

<p class="note"><strong>Note:</strong>
 This feature requires BOSH Director v266.3 or later. 
 This is available in Ops Manager v2.2 and later.</p>

You can configure ODB to provide BOSH DNS addresses for service instances to the 
service adapter `create-binding` call.
This is useful when the binding for a service instance contains, or relies on, 
BOSH DNS addresses for that deployment.
For more information about how DNS addresses are passed to the `create-binding` call, 
see [DNS-ADDRESSES-JSON](./adapter-reference.html#create-binding-dns-addresses).

To enable ODB to provide service instance DNS addresses to the `create-binding` call, 
do the following:

1. Provide a link from the service instance's BOSH release.
Choose any job in the service release and add the link to its `spec` file.
<br><br>
For example:

    ```
    name: redis-server-job
    ...
    provides:
      - name: example-link-1
        type: example-type
    ```
    <br>
For an example `spec` file, see the [Redis Example Service Release](https://github.com/pivotal-cf-experimental/redis-example-service-release/blob/master/jobs/redis-server/spec).

2. Write code in the service adapter that shares the link you provided above in the BOSH
manifest generated for your service instance deployment.
<br><br>
Ensure you share the link in the same job that you added the link to in step 1. 
Include the link in all instance groups that require a DNS address at binding time.
<br><br>
For example:
        
    ```yaml
    instance_groups:
    - name: leader-node
      jobs:
      - name: redis-server-job
        release: redis-cluster-release
        provides:                          # add this section
          example-link-1: {shared: true} 
        ...
    ```

### <a id="handling-errors"></a>Handle Errors

If a subcommand fails, the adapter must return a non-zero exit status, and may optionally print to stdout and/or stderr.

When a subcommand exits with an unrecognized exit code anything printed to stdout is returned to the CF CLI user.

Both the stdout and stderr streams are printed in the broker log for the operator.
For that reason, Pivotal recommends not printing the manifest or other sensitive details to stdout/stderr,
because the ODB does no validation on this output.

See an example implementation [here](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter/blob/892d48b066c9b1d2651080484a53531001e9e920/adapter/create_binding.go#L27-L29).

### <a id="packaging"></a>Packaging a Service Adapter

The adapter should be packaged as a BOSH release, which should be co-located with the 
ODB release in a BOSH manifest by the operator. 
This is only done in order to place the adapter executable on the same VM as the ODB 
server. As a result, the adapter BOSH job's `monit` file should  have no processes defined.

See the following example service adapter releases:

- <a href="https://github.com/pivotal-cf-experimental/kafka-example-service-adapter-release">Kafka example service adapter release</a>
- <a href="https://github.com/pivotal-cf-experimental/redis-example-service-adapter-release">Redis example service adapter release</a>

## <a id="sdk"></a> Golang SDK

Pivotal has published a [SDK](https://github.com/pivotal-cf/on-demand-services-sdk) for 
teams writing their service adapters in golang. It encapsulates the command line invocation 
handling, parameter parsing, response serialization and error handling so the adapter authors 
can focus on the service-specific logic in the adapter.

Use the same version of the SDK as your ODB release. For example, if you are using v0.8.0 of 
the ODB BOSH release, you should check out the v0.8.0 tag of the SDK.

For the generated BOSH manifest, the SDK supports properties in two levels: manifest global and job level. 
Global properties are [deprecated in BOSH](http://bosh.io/docs/manifest-v2.html#properties), in favor 
of job level properties and job links. 

As an example, refer to the [Kafka example service adapter property generation](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter/blob/ffe85fecc2d9cf1b663fab418875e67ddcf3327f/adapter/generate_manifest.go#L79-L123).

### <a id="sdk_usage"></a>Use the SDK

Perform the following steps to use the SDK:

1. Run the following `go get` command to install the SDK:

    ```
    go get github.com/pivotal-cf/on-demand-services-sdk
    ```
1. In the main function for the service adapter, call the `HandleCLI` function: 

    ```go
    package main

    import (
    	"log"
    	"os"

    	"github.com/bar-org/foo-service-adapter/adapter"
    	"github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
    )

    func main() {
      logger := log.New(os.Stderr, "[foo-service-adapter] ", log.LstdFlags)
      manifestGenerator := adapter.ManifestGenerator{}
      binder := adapter.Binder{}
      dashboardUrlGenerator := adapter.DashboardUrlGenerator{}
    	handler := serviceadapter.CommandLineHandler{
      	ManifestGenerator:     manifestGenerator,
      	Binder:                binder,
      	DashboardURLGenerator: &adapter.DashboardUrlGenerator{},
      	SchemaGenerator:       adapter.SchemaGenerator{},
    	}
      serviceadapter.HandleCLI(os.Args, handler)
    }
    ```
  <p class="note"><strong>Note</strong>: The HandleCommandLineInvocation function is being deprecated but its functionality can be seen <a href="https://docs.pivotal.io/svc-sdk/odb/0-19/creating.html#usage">here</a>.</p>

### <a id="interfaces"></a>Interfaces

The `HandleCLI` function accepts structs that implement the following interfaces:

```go
type CommandLineHandler struct {
	ManifestGenerator     ManifestGenerator
	Binder                Binder
	DashboardURLGenerator DashboardUrlGenerator
	SchemaGenerator       SchemaGenerator
}

type ManifestGenerator interface {
	GenerateManifest(serviceDeployment ServiceDeployment, plan Plan, requestParams RequestParameters, previousManifest *bosh.BoshManifest, previousPlan *Plan) (bosh.BoshManifest, error)
}

type Binder interface {
	CreateBinding(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, requestParams RequestParameters) (Binding, error)
	DeleteBinding(bindingID string, deploymentTopology bosh.BoshVMs, manifest bosh.BoshManifest, requestParams RequestParameters) error
}

type DashboardUrlGenerator interface {
	DashboardUrl(instanceID string, plan Plan, manifest bosh.BoshManifest) (DashboardUrl, error)
}

type SchemaGenerator interface {
	GeneratePlanSchema(plan Plan) (PlanSchema, error)
}
```

### <a id="helper_function"></a>Helpers

The helper function `GenerateInstanceGroupsWithNoProperties` can generate the
instance groups for the BOSH manifest from the arguments passed to the adapter.

One of the inputs for this function is `deploymentInstanceGroupsToJobs`,
where instance groups are mapped to jobs for the deployment.
The service author must provide this mapping.
The helper function does not address job level properties for the generated instance groups;
the service author must provide these properties.
For an example implementation, see the job mapping in the [Kafka example
adapter](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter/blob/master/adapter/generate_manifest.go#L15-L21).

The SDK provides the methods `ArbitraryContext` and `Platform`. These are
used to extract the `context` property from the request parameters and the `platform` property from within the
`context`.

The context in the response is a feature of [Open Service Broker API (OSBAPI) v2.13 
specification](https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md)
and is used to pass through information about the environment in which the
platform or app is executing. If the platform does not provide a `context`, the SDK returns empty values.

### <a id="error_handling"></a>Error Handling

Any error returned by the interface functions is considered to be for the Cloud Foundry CLI user and is printed to stdout.

The adapter code is responsible for performing any error logging to stderr that the authors think is relevant for the operator logs.

There are three specialised errors for the `CreateBinding` function, which allow the adapter to exit with the appropriate code:

```go
serviceadapter.NewBindingAlreadyExistsError()
serviceadapter.NewBindingNotFoundError()
serviceadapter.NewAppGuidNotProvidedError()
```

For more complete code examples please take a look at the [Kafka adapter](https://github.com/pivotal-cf-experimental/kafka-example-service-adapter) or the [Redis adapter](https://github.com/pivotal-cf-experimental/redis-example-service-adapter).

### <a id="bosh_features"></a>BOSH Features

Service authors can enable configuration of BOSH Features in their service adapters.

The SDK provides the following [BoshFeatures struct](https://github.com/pivotal-cf/on-demand-services-sdk/blob/49cf3649cd34db8715b673d42e36710517e0f30e/bosh/bosh_manifest.go#L36-L45) 
with the possibility of adding extra features via the `ExtraFeatures` map:

```
type BoshFeatures struct {
	UseDNSAddresses      *bool                  `yaml:"use_dns_addresses,omitempty"`
	RandomizeAZPlacement *bool                  `yaml:"randomize_az_placement,omitempty"`
	UseShortDNSAddresses *bool                  `yaml:"use_short_dns_addresses,omitempty"`
	ExtraFeatures        map[string]interface{} `yaml:"extra_features,inline"`
}
```

For an example, see the [Redis adapter](https://github.com/pivotal-cf-experimental/redis-example-service-adapter/blob/4f78b89d791733d025ae96f4056eb6840989818e/adapter/redis_manifest_generator.go#L215-L222).

For more information on BOSH Features, see [the BOSH documentation](https://bosh.io/docs/manifest-v2.html#features).
