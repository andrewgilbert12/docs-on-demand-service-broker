---
title: Broker and Service Management
owner: London Services Enablement
---

## <a id="management"></a>Broker Management

Management tasks on the broker are performed with BOSH errands.

### <a id="register-broker"></a> Register Broker

The `register-broker` errand registers the broker with Cloud Foundry and enables access to plans in the service catalog. Run this errand whenever the broker is re-deployed with new catalog metadata to update the Cloud Foundry catalog.

#### Add the Register-Broker Errand to the Manifest

To add the `register-broker` errand to the manifest, do the following.

1. Add the following instance group to your manifest:

    ```yaml
    - name: register-broker
      lifecycle: errand
      instances: 1
      jobs:
        - name: register-broker
          release: ODB-RELEASE-NAME
          properties:
            broker_name: BROKER-NAME
            broker_uri: BROKER-URI # optional, only required when a route has been registered
            disable_ssl_cert_verification: TRUE|FALSE # defaults to false
            enable_service_access: TRUE|FALSE # defaults to true
            cf_service_access: ENABLE|DISABLE|MANUAL #optional, defaults to enable
            cf:
              api_url: CF-API-URL
              admin_username: CF-API-ADMIN-USERNAME
              admin_password: CF-API-ADMIN-PASSWORD
      vm_type: VM-TYPE
      stemcell: STEMCELL
      networks: [NETWORK]
      azs: [AZ]
    ```
      - If the `broker_uri` property is set, you must register a route for your broker with Cloud Foundry. See the [Route Registration]() section for more details.
      - When `enable_service_access`: `false` is set, the errand does not change service access for any plan.
      - You can enable individual plans by using the optional `cf_service_access` property. The values accepted are the following:
        - `enable`: the errand enables access for that plan. This is the default value.
        - `disable`: the errand disables access for that plan
        - `manual`: the errand performs no action.

        Only Cloud Foundry admin users can see plans with disabled service access. Org Managers and Space Managers cannot see these plans.

#### Run the Register-Broker Errand

To run the errand, use the following command:

```
bosh2 -d DEPLOYMENT-NAME run-errand register-broker
```

Where:

- `DEPLOYMENT-NAME` is the name of your deployment.

For example:

<pre class="terminal">
$ bosh2 -d cf run-errand register-broker
</pre>

### <a id="delete-instances-and-deregister"></a>Delete All Service Instances and Deregister Broker

This errand performs a similar operation to the errand [delete-all-service-instances](#delete-instances) and [deregister-broker](#deregister-broker).

<p class="note warning"><strong>WARNING:</strong> Use this errand with extreme caution when you want to destroy all of the on-demand service instances and deregister the broker from Cloud Foundry.</p>

This errand does the following:

1. Disables service access to the service offering for all orgs and spaces. The errand disables service access to ensure that new instances cannot be provisioned during the lifetime of the errand.
1. Unbinds all applications from the service instances.
1. Deletes all service instances sequentially.
1. Deregisters the broker from Cloud Foundry.

Add the following instance group to your manifest:

```yaml
- name: delete-all-service-instances-and-deregister-broker
  lifecycle: errand
  instances: 1
  jobs:
    - name: delete-all-service-instances-and-deregister-broker
      release: ODB-RELEASE-NAME
      properties:
        broker_name: BROKER-NAME
        polling_interval_seconds: INTERVAL-IN-SECONDS # defaults to 60
        polling_initial_offset_seconds: OFFSET-IN-SECONDS # defaults to 5

  vm_type: VM-TYPE
  stemcell: STEMCELL
  networks: [{name: NETWORK}]
  azs: [AZ]
```

Where: 

* `INTERVAL-IN-SECONDS`: The interval in seconds before a service instance is deleted. 
* `OFFSET-IN-SECONDS`: The offset in seconds before polling Cloud Foundry to check
if the instance has been deleted.

 <p class="note"><strong>Note</strong>: The `polling_interval_seconds` default is set to 60 seconds
    because the Cloud Controller itself polls the on-demand broker every 60 seconds.
    Setting your polling interval to anything lower than 60 seconds will not speed up the errand.<br/>
    The `polling_initial_offset_seconds` default is set to 5 seconds.
    In systems with more load, consider increasing the polling offset.

Run the errand with the following command:

```
bosh2 -d DEPLOYMENT-NAME run-errand \
delete-all-service-instances-and-deregister-broker
```

Where `DEPLOYMENT-NAME` is the name of your deployment.

For example:

<pre class="terminal">
$ bosh2 -d cf run-errand \
delete-all-service-instances-and-deregister-broker
</pre>

### <a id="deregister-broker"></a>Deregister Broker

This errand deregisters a broker from Cloud Foundry. It requires that there are no existing service instances.

Add the following instance group to your manifest:

```yaml
- name: deregister-broker
  lifecycle: errand
  instances: 1
  jobs:
    - name: deregister-broker
      release: ODB-RELEASE-NAME
      properties:
        broker_name: BROKER-NAME
  vm_type: VM-TYPE
  stemcell: STEMCELL
  networks: [{name: SERVICE-NETWORK}]
  azs: [AZ]
```

Run the errand with the following command:


```
bosh2 -d DEPLOYMENT-NAME run-errand deregister-broker
```

Where `DEPLOYMENT-NAME` is the name of your deployment.

For example:

<pre class="terminal">
$ bosh2 -d cf run-errand deregister-broker
</pre>

### <a id="delete-instances"></a>Delete All Service Instances

This errand deletes all service instances of your broker's service offering in every org and space of Cloud Foundry.
It uses the Cloud Controller API to do this, and therefore only deletes instances the Cloud Controller knows about.
It does not delete orphan BOSH deployments: those that don't correspond to a known service instance.
Orphan BOSH deployments *should* never happen, but in practice they might.
Use the [orphan-deployments errand](#listing-orphans) to identify them.

The errand does the following:

1. Unbinds all applications from the service instances
1. Deletes all service instances sequentially
1. Checks if any instances have been created while the errand was running
1. If instances are detected the errand fails
1. Re-runs the errand

**This errand should only be used with extreme caution when you want to totally destroy all of the on-demand service instances from Cloud Foundry.**

Add the following instance group to your manifest:

```yaml
- name: delete-all-service-instances
  lifecycle: errand
  instances: 1
  jobs:
    - name: delete-all-service-instances
      release: ODB-RELEASE-NAME
      properties:
        polling_interval_seconds: INTERVAL-IN-SECONDS # defaults to 60
        polling_initial_offset_seconds: OFFSET-IN-SECONDS # defaults to 5

  vm_type: VM-TYPE
  stemcell: STEMCELL
  networks: [{name: NETWORK}]
  azs: [AZ]
```

Where:

* `INTERVAL-IN-SECONDS`: The interval in seconds before a service instance is deleted. 
* `OFFSET-IN-SECONDS`: The offset in seconds before polling Cloud Foundry to check
if the instance has been deleted.

 <p class="note"><strong>Note</strong>: The `polling_interval_seconds` default is set to 60 seconds
    because the Cloud Controller itself polls the on-demand broker every 60 seconds.
    Setting your polling interval to anything lower than 60 seconds will not speed up the errand.<br/>
    The `polling_initial_offset_seconds` default is set to 5 seconds
    because we don't want the delete all errand to start polling cloudfoundry before
    cloudfoundry has finished processing the delete request and has contacted the broker.
    In systems with more load on cloudfoundry, this process could take a longer,
    in which case you might consider increasing the polling offset.</p>

Run the errand with the following command:

```
bosh2 -d DEPLOYMENT-NAME run-errand \
delete-all-service-instances
```

Where `DEPLOYMENT-NAME` is the name of your deployment.

For example:

<pre class="terminal">
$ bosh2 -d cf run-errand \
delete-all-service-instances
</pre>

### <a id="orphan-deployments"></a>Delete Orphaned Deployments

<p class="note warning"><strong>WARNING:</strong> Deleting the BOSH deployment destroys the VM.
  Any data present is lost.</p>

The deployment for a service instance is defined as 'Orphaned' when the BOSH
deployment is still running, but the service is no longer registered in
Cloud Foundry.

The `orphan-deployments` errand will collate a list of service deployments that
have no matching service instances in Cloud Foundry and return the list to the
operator. It is then up to the operator to remove the orphaned BOSH deployments.

Add the following instance group to your manifest:

```yaml
- name: orphan-deployments
  lifecycle: errand
  instances: 1
  jobs:
  - name: orphan-deployments
    release: ODB-RELEASE-NAME
  vm_type: VM-TYPE
  stemcell: STEMCELL
  networks: [{name: NETWORK}]
  azs: [AZ]
```

Run the errand with the following command:

```
bosh2 -d DEPLOYMENT-NAME run-errand orphan-deployments
```

Where `DEPLOYMENT-NAME` is the name of your deployment.

For example:
<pre class="terminal">
$ bosh2 -d cf run-errand orphan-deployments
</pre>

If orphan deployments are present, the errand will output a list of orphaned deployments that resembles the following:

<pre class="terminal">
[stdout]
[{"deployment_name":"service-instance_aoeu39fgn-8125-05h2-9023-9vbxf7676f3"}]
[stderr]
None
Errand 'orphan-deployments' completed successfully (exit code 0)
</pre>

To delete the orphan deployment, run the following command:

```
bosh2 -d DEPLOYMENT-NAME delete-deployment 
```

Where `DEPLOYMENT-NAME` is the name of the orphaned deployment returned in the output of the errand.

For example:

<pre class="terminal">
bosh2 -d service-instance_aoeu39fgn-8125-05h2-9023-9vbxf7676f3 \
delete-deployment
</pre>

## <a id="update-service-plans"></a>Update Service Plans

### <a id="update-broker"></a>Update Broker

To update the [core broker configuration](#core-broker-config), do the following:

* Make any necessary changes to the core broker configuration in the broker manifest.
* Deploy the broker.

### <a id="updating-service-offering"></a>Update Service Offering

To update the service offering, do the following:

* Make any changes to properties in the `service_catalog` of the broker manifest. For example, update the service metadata.
* Make any changes to properties in the `service_deployment` of the broker manifest. For example, update the jobs used from a service release.
* Deploy the broker.

<p class="note warning"><strong>WARNING</strong>: Once the broker has been registered with Cloud Foundry do not change the <code>service_id</code> or the <code>plan_id</code> for any plan. When the ODB starts it checks that all existing service instances in Cloud Foundry have a <code>plan_id</code> that exists in the <code>service_catalog</code>.</p>

After changing the `service_catalog`, you should run the [register-broker errand](#register) to update the Cloud Foundry marketplace.

When the plans are updated in the `service_catalog`, then upgrades will need to be applied to existing service instances. See [upgrading all service instances](#upgrade-all-instances).

### <a id="disabling-service-plans"></a>Disable Service Plans

To disable access to a service plan, run the following Cloud Foundry CLI (cf CLI) command:

```
cf disable-service-access SERVICE-NAME-FROM-CATALOG -p PLAN-NAME
```

Where:

* `SERVICE-NAME-FROM-CATALOG` is the name of the service from the service catalog.
* `PLAN-NAME` is the name of the plan you want to disable.

For example:

<pre class="terminal">
cf disable-service-access my-service -p small
</pre>

Also, when a plan has the property `cf_service_access: disable` in the `service_catalog` then the [register-broker errand](#register) errand will disable service access to that plan.

### <a id="remove-plans"></a>Remove Service Plans

A service plans can be removed if there are no instances using the plan. To remove the a plan, remove it from the broker manifest and update the Cloud Foundry marketplace by running the [register-broker errand](#register).

<p class="note warning"><strong>WARNING</strong>: If any service instances remain on a plan that has been removed from the catalog then the ODB will fail to start.</p>

