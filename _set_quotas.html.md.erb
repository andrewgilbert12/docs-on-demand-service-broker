On-demand provisioning is intended to accelerate application development teams since it eliminates the need for development teams to request/wait for Operators to create a service instance for them. However, Operations teams and Administrators still need to ensure responsible use and keep resource costs in check. There are multiple ways for Service Operators and CF admins to control the provisioning of on-demand service instances.

In the lingua franca of Cloud Foundry, we refer to these limits as `quotas`.

## Creating service level quotas

A service level quota refers to the maximum number of service instances that can be created by a given service broker, and this is independent by service (e.g. if you have p.redis and p.rabbitmq, you can set independent quotas for each broker). This quota can be set in the service tile in Ops Manager, as shown in the picture below:

![service_level_quotas](images/service_level_quota.png)


## Creating plan level quotas

A service broker may offer one or several plans. You can also set quotas per plan. Please note that if you set a plan level quota as well as a service level quota, then new service instances will be created until at least one of those quotas is saturated. This quota can be set in the service tile in Ops Manager, as shown in the picture below:

![plan_level_quotas](images/plan_level_quota.png)

## Creating and setting org level quotas

An org level service quota is service agnostic, and refers to the maximum number of service instances an organization can create within Cloud Foundry. For example, if you set your org level service quota to 100, your developers can create up to 100 service instances using any combination of services. Once this quota is met, no more service instances of any kind can be created unless the quota is updated, or some service instances are deleted.

You can create an org-level quota with the following command:

```
cf create-quota QUOTA -m TOTAL_MEMORY -i INSTANCE_MEMORY -r ROUTES -s SERVICE_INSTANCES --allow-paid-service-plans
```

note
	Use the `-s` flag to specify the maximum number of service instances allowed for the org

Once the org-level quota has been created, you can associate it with the org by using the `cf set-quota` command as follows:

```
cf set-quota ORG_NAME QUOTA_NAME
```

See the [CF CLI guide](https://docs.pivotal.io/pivotalcf/1-12/adminguide/quota-plans.html) for more information on managing org level quotas.

## Creating and setting space level quotas

A space level service quota is also service-agnostic, and refers to the maximum number of service instances that can be created within a given space in Cloud Foundry. For example, if you set your space level service quota to 100, your space developers can create up to 100 service instances using any combination of services. Once this quota is met, no more service instances of any kind can be created unless the quota is updated, or some service instances are deleted.

You can create a space-level quota with the following command:

```
cf create-space-quota QUOTA -m TOTAL_MEMORY -i INSTANCE_MEMORY -r ROUTES -s SERVICE_INSTANCES --allow-paid-service-plans
```

note
	Use the `-s` flag to specify the maximum number of service instances allowed for the space

Once the space-level quota has been created, you can associate it with the org by using the `cf set-space-quota` command as follows:

```
cf set-space-quota SPACE_NAME QUOTA_NAME
```

See the [CF CLI guide](https://docs.pivotal.io/pivotalcf/1-12/adminguide/quota-plans.html) for more information on managing space level quotas.

## Viewing Org and Space level quotas that have been set
You can use the `cf org` command to view quotas associated with the org. 

```
cf org ORG_NAME
```

Similarly, you can use the `cf space` command to view space level quotas associated with the space. 

```
cf space SPACE_NAME
```

See the [CF CLI guide](https://docs.pivotal.io/pivotalcf/1-12/adminguide/quota-plans.html) for more information on managing org and space level quotas.

## Monitoring Service and Plan Quota Saturation and Service Instance Count
Service level and plan level quota saturation and total number of service instances are available through ODB metrics emitted to Loggregator. The metric names are shown below:

| **Metric name**                                                         | **Description**                                            |
|-------------------------------------------------------------------------|------------------------------------------------------------|
| on-demand-broker/{service-name-marketplace}/quota_remaining             | service quota remaining for all instances across all plans |
| on-demand-broker/{service-name-marketplace}/{plan_name}/quota_remaining | quota remaining for a particular plan                      |
| on-demand-broker/{service-name-marketplace}/total_instances             | total instances created across all plans                   |
| on-demand-broker/{service-name-marketplace}/{plan_name}/total_instances | total instances created for a given plan                   |

note
    Quota metrics are not emitted if no quota has been set.

## Calculating resource costs for on-demand plans

warning
	RabbitMQ On-Demand plans use dedicated VM and disks, which will consume IaaS resources. Operators can limit resource usage with Plan Quotas and a Global Quota, but resource usage will vary based on number of On-Demand instances provisioned.

If the number of on-demand instances is greater than or equal to the Global Quota set on the ‘On Demand Service Settings’ page, no new instances can be provisioned.

To calculate the maximum cost/ usage for each plan:

```
max_plan_resources = plan_quota x plan_resources
```

To calculate the maximum cost across plans, add together the cost/ usage for each plan, while the quotas sum to less than the global quota.

```
While (plan_1_quota + plan_2_quota) ≤ global_quota:
max_resources = (plan_1_quota x plan_1_resources) + ( plan_2_quota x plan_2_resources)
```

To calculate the current IaaS cost/ usage across On-Demand plans:

1. Current instances provisioned for all plans can be found by referencing the total_instance metric.
2. Multiply the total_instance for each plan by that plan’s resources. Sum all plans that are active to get your total current usage

```
current_usage = (plan_1_total_instances x plan_1_resources) + (plan_2_total_instances x plan_2_resources)
```

