---
title: Creating an On-Demand Service Tile
owner: London Services Enablement
---

This documents the process for deploying an on-demand broker (ODB) with a service in a single tile, on a AWS installation of Ops Manager 1.8. We have built a reference [Kafka tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile).

## <a id="requirements"></a>Requirements

Before ODB, Ops Manager controlled the IP allocation of the private networks. When you use ODB in a tile, you will need at least two private networks:

* a network where Ops Manager will deploy the ODB VM, and
* a different network where the ODB will deploy service instance VMs.

The network for service instances should be flagged as a Service Network in Ops Manager.

## <a id="deploying"></a>Deploying Ops Manager to AWS

1. Follow the default [Ops Manager deployment docs](https://docs.pivotal.io/pivotalcf/customizing/cloudform-template.html), but with these modifications:
  1. Create a self-signed wildcard SSL certificate for a domain you control. This is often `*.some-subdomain.cf-app.com`. 
  1. Upload the SSL cert (along with the associated private key) to AWS by following [these instructions](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/ssl-server-cert.html#create-cert).
  1. Download the CloudFormation JSON and save it in the Ops Manager directory.
  1. Run the CloudFormation stack. Save any pertinent inputs (for example, BOSH DB credentials) you type into the web console into the Ops Manager directory.
  1. Launch an instance of the AMI. If possible, use an elastic IP so you can keep the same DNS record even if you must recreate the VM. Failing that, auto-assign a public IP.
  1. Create a DNS record for `pcf.YOUR-WILDCARD-DOMAIN`. Following the earlier example, the record would be for `pcf.some-subdomain.cf-app.com`. Point the record to the public IP of the Ops Manager VM.
1. Log into Ops Manager and save the credentials.
1. Configure the Ops Manager Director (BOSH) tile.
1. Click "Apply Changes", and save the BOSH init manifest for future reference. `scp -i private_key.pem ubuntu@opsmanIP:/var/tempest/workspaces/default/deployments/bosh.yml bosh.yml`

## Deployment Configuration Tips

1. The ELBs created by CloudFormation are both for CF, not Ops Manager. One of them will be configured with your wildcard certificate. This takes the place of HAProxy in AWS PCF deployments, and is therefore not used until you deploy the ERT tile.
1. To target the Ops Manager Director from the Ops Manager VM, use `bosh --ca-cert /var/tempest/workspaces/default/root_ca_certificate target 10.0.16.10`.

## <a id="building"></a>Build a Tile

Follow the default build your own [product tile documentation](http://docs.pivotal.io/tiledev/tile-generator.html) and configure the `handcraft.yml` with the accessors listed below. To access the `$self` accessors, the `service-broker` flag in the handcraft.yml must be set to `true`.

<p class="note"><strong>Note</strong>: If you are publishing a tile to be consumed by Ops Manager 1.8.x or 1.9.x, you will need to build your tile using releases with SHA-1 internal checksums. ODB releases are published using SHA-2 internal checksums. You can convert these releases to use SHA-1 internal checksums using the BOSH CLI command <code>sha1ify-release</code>.</p>

<p class="note"><strong>Note</strong>: Dynamic collections do not work for on-demand plans, so you should use separate forms for each plan. See the <a href="https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile/blob/master/metadata_parts/handcraft.yml">Kafka Example Tile</a> for an example.</p>

## <a id="accessors"></a>Non-Exhaustive Accessors Reference

### Ops Manager Director

These accessors are used to provide fields relating to the BOSH Director installation present.

<table class="nice">
  <th>Accessor</th>
  <th>Description</th>
  <tr>
    <td>$director.hostname</td>
    <td>The Ops Manager Director's hostname or IP address</td>
  </tr>
  <tr>
    <td>$director.ca_public_key</td>
    <td>The Ops Manager Director's root CA certificate. For more information, see <a href="./operating.html#ssl-certificates">How to configure SSL certificates for the ODB</a>.</td>
  </tr>
</table>

For example:

```yaml
bosh:
  url: https://(( $director.hostname )):25555
  root_ca_cert: (( $director.ca_public_key ))
```

### Self

These accessors are used to provide fields that belong to the specific tile (in this case, the broker tile).

<table class="nice">
  <th>Accessor</th>
  <th>Description</th>
  <tr>
    <td>$self.uaa\_client_name</td>
    <td>Name of UAA client that can authenticate with the Ops Manager Director</td>
  </tr>
  <tr>
    <td>$self.uaa_client_secret</td>
    <td>Name of UAA secret that can authenticate with the BOSH director</td>
  </tr>
  <tr>
    <td>$self.service_network </td>
    <td>Service network configured for the on-demand instances
</td>
  </tr>
</table>

You must create the service network manually. Create a subnet on AWS and then add it to the Director by configuring the Director tile. Configuration options are in the tile, under *Create Networks* > *ADD network*.

`$self` accessors are enabled by setting `service_broker: true` at the top level of `handcraft.yml`. 

<p class="note"><strong>Note:</strong> Setting `service_broker: true` will cause a redeployment of the BOSH director when installing or uninstalling the tile.</p>

For example:

```yaml
bosh:
  authentication:
    uaa:
      url: https://(( $director.hostname )):8443
      client_id: (( $self.uaa_client_name ))
      client_secret: (( $self.uaa_client_secret ))
```

### CF CLI

These accessors are used to provide fields from the Elastic Runtime Tile (Cloud Foundry) present in the Ops Manager installation.

<table class="nice">
  <th>Accessor</th>
  <th>Description</th>
  <tr>
    <td>..cf.ha\_proxy.skip\_cert\_verify.value</td>
    <td>Flag to skip SSL certificate verification for connections to the CF API</td>
  </tr>
  <tr>
    <td>..cf.cloud\_controller.apps\_domain.value</td>
    <td>The application domain configured in the CF installation</td>
  </tr>
  <tr>
    <td>..cf.cloud\_controller.system\_domain.value</td>
    <td>The system domain configured in the CF installation</td>
  </tr>
  <tr>
    <td>..cf.uaa.system\_services\_credentials.identity</td>
    <td>Username of a CF user in the <code>cloud\_controller.admin</code> group, to be used by services</td>
  </tr>
  <tr>
    <td>..cf.uaa.system\_services\_credentials.password</td>
    <td>Password of a CF user in the <code>cloud\_controller.admin</code> group, to be used by services</td>
  </tr>
</table>

For example:

```yaml
disable_ssl_cert_verification: (( ..cf.ha_proxy.skip_cert_verify.value ))
cf:
  url: https://api.(( ..cf.cloud_controller.system_domain.value ))
  authentication:
    url: https://uaa.(( ..cf.cloud_controller.system_domain.value ))
    user_credentials:
      username: (( ..cf.uaa.system_services_credentials.identity ))
      password: (( ..cf.uaa.system_services_credentials.password ))
```

#### Reference

For more accessors, see the [ops-manager-example product](https://github.com/pivotal-cf-experimental/ops-manager-example)

## <a id="public-ip"></a>Public IP address for on-demand service instance groups

Ops Manager 1.9 RC1+ provides a VM extension called `public_ip` in the BOSH Director's cloud config. This can be used in the ODB's manifest to give instance groups a public IP address. This IP is only used for outgoing traffic to the internet from VMs with the `public_ip` extension. All internal traffic / incoming connections need to go over the private IP.

Here is an example showing how to allow operators to assign a public IP address to an on-demand service instance group in the tile handcraft:

```yaml
form_types:
- name: example_form
  property_inputs:
  - reference: .broker.example_vm_extensions
    label: VM options
    description: List of VM options for Service Instances

job_types:
- name: broker
  templates:
  - name: broker
    release: on-demand-service-broker
    manifest: |
      service_catalog:
        plans:
        - name: example-plan
          instance_groups:
          - name: example-instance-group
            vm_extensions: (( .broker.example_vm_extensions.value ))
  property_blueprints:
  - name: example_vm_extensions
    type: multi_select_options
    configurable: true
    optional: true
    options:
    - name: "public_ip"
      label: "Internet Connected VMs (on supported IaaS providers)"
```

## <a id="floating-stemcell"></a>Floating stemcells

Ops Manager provides a feature called [Floating Stemcells](https://docs.pivotal.io/pivotalcf/1-9/customizing/understanding-stemcells.html) that allows PCF to quickly propagate a patched stemcell to all VMs in the deployment that have the same compatible stemcell. Both the broker deployment and the service instances deployed by the On-Demand Broker can make use of this feature. Enabling this feature can help ensure that all of your service instances are patched to the latest stemcell.

In order for the service instances to be installed automatically with the latest stemcell, you will need to make sure the `upgrade-all-service-instances` errand is ticked.

Here is an example of how to implement floating stemcells in `handcraft.yml`:

```yaml
job_types:
  templates:
  - name: broker
    manifest: |
      service_deployment:
        releases:
        - name: release-name
          version: 1.0.0
          jobs: [job_server]
        stemcell:
          os: ubuntu-trusty
          version: (( $self.stemcell_version ))
```

Here is an example of how to configure the `stemcell_criteria` in `binaries.yml`:

```
---
name: example-on-demand-service
product_version: 1.0.0
stemcell_criteria:
  os: ubuntu-trusty
  version: '3312'
  enable_patch_security_updates: true
```

<p class="note"><strong>Note:</strong> Configuring <code>enable_patch_security_updates</code> to <code>false</code> will disable this feature.

## <a id="errands"></a>On-Demand Broker errands

In the reference [Kafka tile](https://github.com/pivotal-cf-experimental/example-kafka-on-demand-tile), you can see how the ODB release's errands in use.

Specify the errands in the following order, as shown in the example Kafka tile:

Post-deploy:

- `register-broker`
- `upgrade-all-service-instances`

Pre-delete:

- `delete-all-service-instances-and-deregister-broker`

These errands are documented in the [operating section](operating.html#management).
